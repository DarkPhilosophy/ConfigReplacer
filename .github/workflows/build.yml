name: Build ConfigReplacer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Checkout Common library
      uses: actions/checkout@v4
      with:
        repository: DarkPhilosophy/Common
        path: Common
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    
    - name: Install .NET Framework Developer Pack
      run: |
        choco install netfx-4.8-devpack -y
      shell: pwsh
    
    - name: List directory structure
      run: |
        dir
        dir -Recurse -Depth 2
      shell: pwsh
    
    - name: Install Newtonsoft.Json package
      run: |
        dotnet add package Newtonsoft.Json --version 13.0.3
      shell: pwsh
      continue-on-error: true
    
    - name: Build Common library first
      run: |
        cd Common
        dotnet restore Common.csproj
        dotnet build Common.csproj --configuration Release
        
        # Copy the built DLLs to a location where the main project can find them
        mkdir -p ../lib
        Copy-Item -Path bin/Release/*/Common.dll -Destination ../lib/ -Force
        cd ..
      shell: pwsh
      continue-on-error: true
    
    - name: Update project reference
      run: |
        # Check if the project file exists
        if (Test-Path ConfigReplacer.csproj) {
          # Read the project file content
          $content = Get-Content -Path ConfigReplacer.csproj -Raw
          
          # Update the project reference to point to the Common project in the subdirectory
          $content = $content -replace '<ProjectReference Include="..\\Common\\Common.csproj" />', '<Reference Include="Common"><HintPath>lib\\Common.dll</HintPath></Reference>'
          
          # Write the updated content back to the file
          Set-Content -Path ConfigReplacer.csproj -Value $content
          
          # Show the updated file
          Get-Content -Path ConfigReplacer.csproj | Select-String -Pattern "Reference"
        } else {
          echo "ConfigReplacer.csproj not found!"
        }
      shell: pwsh
      continue-on-error: true
    
    - name: Restore dependencies with dotnet
      run: |
        # Explicitly specify the project file for restore
        dotnet restore ConfigReplacer.csproj
      shell: pwsh
    
    - name: Build with dotnet (.NET Framework 4.8)
      run: |
        dotnet build ConfigReplacer.csproj --configuration Release --framework net48
        echo "Build exit code: $LASTEXITCODE"
      shell: pwsh
      continue-on-error: true
    
    - name: Build with dotnet (.NET 6.0)
      run: |
        dotnet build ConfigReplacer.csproj --configuration Release --framework net6.0-windows
        echo "Build exit code: $LASTEXITCODE"
      shell: pwsh
      continue-on-error: true
    
    - name: Build with dotnet (.NET 8.0)
      run: |
        dotnet build ConfigReplacer.csproj --configuration Release --framework net8.0-windows
        echo "Build exit code: $LASTEXITCODE"
      shell: pwsh
      continue-on-error: true
    
    - name: Search for build outputs
      run: |
        echo "Searching for EXE and DLL files:"
        Get-ChildItem -Path . -Include *.exe,*.dll -Recurse | Select-Object FullName
      shell: pwsh
    
    - name: Create output directories and copy files
      run: |
        mkdir -p output
        
        # Find and copy any EXE and DLL files
        $files = Get-ChildItem -Path . -Include *.exe,*.dll -Recurse | Where-Object { $_.FullName -notlike "*\\Common\\*" -and $_.FullName -notlike "*\\lib\\*" }
        if ($files.Count -gt 0) {
          foreach ($file in $files) {
            $destPath = Join-Path "output" $file.Name
            Copy-Item -Path $file.FullName -Destination $destPath -Force
            echo "Copied $($file.FullName) to $destPath"
          }
        } else {
          echo "No EXE or DLL files found to copy"
        }
      shell: pwsh
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ConfigReplacer-build-outputs
        path: output/
        if-no-files-found: warn
